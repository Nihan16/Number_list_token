from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from config import BOT_TOKEN, NUMBERS_FILE, NAMES_FILE
import os
import logging # рж▓ржЧрж┐ржВ ржоржбрж┐ржЙрж▓ ржЗржорзНржкрзЛрж░рзНржЯ ржХрж░рж╛ рж╣рж▓рзЛ

# рж▓ржЧрж┐ржВ ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи рж╕рзЗржЯржЖржк
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ---

async def _send_file_content(update: Update, file_path: str, empty_message: str, file_type_name: str):
    """
    ржПржХржЯрж┐ рж╕рж╛ржзрж╛рж░ржг рж╣рзЗрж▓рзНржкрж╛рж░ ржлрж╛ржВрж╢ржи ржпрж╛ ржПржХржЯрж┐ ржлрж╛ржЗрж▓ ржерзЗржХрзЗ ржбрзЗржЯрж╛ ржкржбрж╝рзЗ ржПржмржВ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржмрж╛рж░рзНрждрж╛рзЯ ржкрж╛ржарж╛ржпрж╝ред
    """
    if not os.path.exists(file_path):
        logger.warning(f"File not found: {file_path}")
        await update.message.reply_text(f"ЁЯУВ {file_type_name} ржлрж╛ржЗрж▓ржЯрж┐ ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛ржЪрзНржЫрзЗ ржирж╛!")
        return

    try:
        with open(file_path, "r", encoding="utf-8") as file:
            lines = file.readlines()
    except Exception as e:
        logger.error(f"Error reading file {file_path}: {e}")
        await update.message.reply_text(f"тЪая╕П {file_type_name} ржлрж╛ржЗрж▓ржЯрж┐ ржкрзЬрждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржЪрзНржЫрзЗ!")
        return

    if not lines:
        logger.info(f"File {file_path} is empty.")
        await update.message.reply_text(empty_message)
        return

    count = 0
    message = ""
    for line in lines:
        line = line.strip()
        if line:
            message += f"`{line}`\n"
            count += 1
        if count == 10: # ржкрзНрж░ржержо 10ржЯрж┐ рж▓рж╛ржЗржи ржкрж╛ржарж╛ржирзЛрж░ ржкрж░ ржмржирзНржз рж╣ржмрзЗ
            break

    if message:
        await update.message.reply_text(message, parse_mode="Markdown")
    else:
        # ржпржжрж┐ ржлрж╛ржЗрж▓ ржерзЗржХрзЗ ржХрзЛржирзЛ ржмрзИржз (ржЦрж╛рж▓рж┐ ржирзЯ) рж▓рж╛ржЗржи ржирж╛ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯ
        await update.message.reply_text(empty_message)


# ЁЯУ▓ Send Numbers ржХржорж╛ржирзНржб
async def send_numbers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("Received /numbers command")
    await _send_file_content(update, NUMBERS_FILE, "тЪая╕П ржХрзЛржирзЛ ржирж╛ржорзНржмрж╛рж░ ржирзЗржЗ ржлрж╛ржЗрж▓рзЗ!", "numbers.txt")


# ЁЯзСтАНЁЯТ╗ Send Names ржХржорж╛ржирзНржб
async def send_names(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("Received /names command")
    await _send_file_content(update, NAMES_FILE, "тЪая╕П ржХрзЛржирзЛ ржирж╛ржо ржирзЗржЗ ржлрж╛ржЗрж▓рзЗ!", "names.txt")


# тЬЕ Start ржХржорж╛ржирзНржб
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("Received /start command")
    await update.message.reply_text("тЬЕ Bot is active.\nSend /numbers or /names to get data.")


# ЁЯЪА ржмржЯ ржЪрж╛рж▓рзБ ржХрж░рзБржи
if __name__ == "__main__":
    logger.info("Starting Telegram Bot...")
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("numbers", send_numbers))
    app.add_handler(CommandHandler("names", send_names))

    app.run_polling()
    logger.info("Telegram Bot stopped.")

