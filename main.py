import os

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackContext, filters

from utils import get_next_numbers, get_next_names

user_progress_numbers = {}
user_progress_names = {}

keyboard = [
    ["üìû Get Number", "üßë‚Äçüíª Get Name"]
]
markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: CallbackContext):
    """Handles the /start command, sends a welcome message and the main keyboard."""
    await update.message.reply_text(
        "üëã ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®?",
        reply_markup=markup
    )

async def handle_message(update: Update, context: CallbackContext):
    """Handles all text messages from the user."""
    user_id = update.message.from_user.id
    text = update.message.text.strip()

    if text == "üìû Get Number":
        if user_id not in user_progress_numbers:
            user_progress_numbers[user_id] = 0
        
        start_index = user_progress_numbers[user_id]
        numbers = get_next_numbers(start_index, 10) # 10‡¶ü‡¶ø ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶Ü‡¶®‡¶æ ‡¶π‡¶¨‡ßá

        if not numbers:
            await update.message.reply_text("‚ùå ‡¶Ü‡¶∞ ‡¶ï‡ßã‡¶®‡ßã ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶®‡ßá‡¶á! ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶ï‡ßá `numbers.txt` ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡¶≤‡ßÅ‡¶®‡•§")
            return
        
        # ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá
        for num in numbers:
            await update.message.reply_text(f"`{num}`", parse_mode="Markdown") # Markdown ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶∏‡¶π‡¶ú ‡¶π‡¶¨‡ßá
        
        user_progress_numbers[user_id] += 10 # 10‡¶ü‡¶ø ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶è‡¶ó‡¶ø‡ßü‡ßá ‡¶Ø‡¶æ‡¶ì‡ßü‡¶æ ‡¶π‡¶¨‡ßá

    elif text == "üßë‚Äçüíª Get Name":
        if user_id not in user_progress_names:
            user_progress_names[user_id] = 0
        
        start_index = user_progress_names[user_id]
        names = get_next_names(start_index, 5) # 5‡¶ü‡¶ø ‡¶®‡¶æ‡¶Æ ‡¶Ü‡¶®‡¶æ ‡¶π‡¶¨‡ßá

        if not names:
            await update.message.reply_text("‚ùå ‡¶Ü‡¶∞ ‡¶ï‡ßã‡¶®‡ßã ‡¶®‡¶æ‡¶Æ ‡¶®‡ßá‡¶á! ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶ï‡ßá `names.txt` ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡¶≤‡ßÅ‡¶®‡•§")
            return
        
        # ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶®‡¶æ‡¶Æ ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá
        for name in names:
            await update.message.reply_text(f"`{name}`", parse_mode="Markdown") # Markdown ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶∏‡¶π‡¶ú ‡¶π‡¶¨‡ßá
        
        user_progress_names[user_id] += 5 # 5‡¶ü‡¶ø ‡¶®‡¶æ‡¶Æ ‡¶è‡¶ó‡¶ø‡ßü‡ßá ‡¶Ø‡¶æ‡¶ì‡ßü‡¶æ ‡¶π‡¶¨‡ßá

def main():
    """Sets up the Telegram bot application and runs it."""
    token = os.getenv("BOT_TOKEN") 
    if not token:
        print("Error: BOT_TOKEN environment variable not set. Please set it in Railway or your local environment.")
        return

    application = ApplicationBuilder().token(token).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    print("‚úÖ Bot running...")
    application.run_polling()

if __name__ == "__main__":
    main()
